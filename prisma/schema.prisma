// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modelo para usuarios
model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  simulations  Simulation[]
  leanCanvases LeanCanvas[]

  @@map("users")
}

// Modelo para el Lean Canvas
model LeanCanvas {
  id                     String       @id @default(cuid())
  problem                String?      @db.Text
  solution               String?      @db.Text
  uniqueValueProposition String?      @db.Text
  customerSegments       String?      @db.Text
  channels               String?      @db.Text
  revenueStreams         String?      @db.Text
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  userId                 String? // Make optional for anonymous users
  user                   User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  simulations            Simulation[]

  @@index([userId])
  @@map("lean_canvases")
}

// Modelo para simulaciones (contenedor principal)
model Simulation {
  id           String      @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String? // Make optional for anonymous users
  deviceId     String? // Add deviceId for anonymous users
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  leanCanvasId String?
  leanCanvas   LeanCanvas? @relation(fields: [leanCanvasId], references: [id], onDelete: Cascade)

  // Relaciones con inputs y resultados
  financialInputs FinancialInputs?
  results         SimulationResults?

  @@index([deviceId])
  @@index([userId])
  @@index([createdAt])
  @@map("simulations")
}

// Nuevo modelo para inputs financieros separado
model FinancialInputs {
  id           String     @id @default(cuid())
  simulationId String     @unique
  simulation   Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)

  // Financial input fields
  averagePrice            Float
  costPerUnit             Float
  fixedCosts              Float
  customerAcquisitionCost Float
  monthlyNewCustomers     Float
  averageCustomerLifetime Float

  // Additional validation metadata
  validationWarnings Json? // Store validation warnings/notes
  calculationNotes   String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("financial_inputs")
}

// Nuevo modelo para resultados de simulaci√≥n separado
model SimulationResults {
  id           String     @id @default(cuid())
  simulationId String     @unique
  simulation   Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)

  // Calculated KPI results
  unitMargin      Float
  monthlyRevenue  Float
  monthlyProfit   Float
  ltv             Float
  cac             Float
  cacLtvRatio     Float
  breakEvenUnits  Float
  breakEvenMonths Float

  // Health indicators and classifications
  profitabilityHealth String // "good" | "medium" | "bad"
  ltvCacHealth        String // "good" | "medium" | "bad"
  overallHealth       String // "good" | "medium" | "bad"

  // Recommendations and insights
  recommendations Json // Array of recommendation objects
  insights        Json // Additional insights and warnings

  // Calculation metadata
  calculatedAt       DateTime @default(now())
  calculationVersion String   @default("1.0") // Track calculation method version

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([overallHealth])
  @@index([calculatedAt])
  @@map("simulation_results")
}
