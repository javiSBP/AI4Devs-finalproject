---
description: 
globs: unit,testing
alwaysApply: false
---
# LeanSim Testing Strategy Guide

## Overview

LeanSim maintains a comprehensive test suite with 108+ tests covering all major functionality. The testing strategy balances performance, reliability, and maintainability.

## Test Architecture

### Test Files Structure
- [src/lib/financial/calculator.test.ts](mdc:src/lib/financial/calculator.test.ts) - Financial calculations (3 tests)
- [src/utils/storage/lean-canvas.test.ts](mdc:src/utils/storage/lean-canvas.test.ts) - Storage utilities (12 tests)
- [src/lib/api/lean-canvas.test.ts](mdc:src/lib/api/lean-canvas.test.ts) - API client (17 tests, 6 skipped)
- [src/lib/api/middleware.test.ts](mdc:src/lib/api/middleware.test.ts) - API middleware (26 tests)
- [src/app/api/v1/lean-canvas/route.test.ts](mdc:src/app/api/v1/lean-canvas/route.test.ts) - Collection routes (13 tests)
- [src/app/api/v1/lean-canvas/[id]/route.test.ts](mdc:src/app/api/v1/lean-canvas/[id]/route.test.ts) - Individual resource routes (18 tests)
- [src/hooks/useLeanCanvas.test.ts](mdc:src/hooks/useLeanCanvas.test.ts) - React Hook integration (18 tests)

### Test Configuration
- [vitest.config.ts](mdc:vitest.config.ts) - Main test configuration
- [vitest.setup.ts](mdc:vitest.setup.ts) - Global test setup with MSW
- [src/mocks/handlers.ts](mdc:src/mocks/handlers.ts) - MSW request handlers

## Testing Principles

### 1. Performance First
- **Target**: Complete test suite under 5 seconds
- **Strategy**: Lightweight mocking, avoid heavy React Hook Form testing
- **Tools**: `vi.useFakeTimers()`, simplified mocks, strategic skipping

### 2. Realistic Expectations
- **Unit Tests**: Business logic, utilities, API clients
- **Integration Tests**: Component-level interactions
- **E2E Tests**: Full user workflows (complex form interactions)

### 3. Strategic Mocking
```typescript
// ✅ Good: Lightweight mocking for performance
vi.mock("react-hook-form", () => ({
  useForm: vi.fn(() => mockFormMethods),
}));

// ❌ Avoid: Complex form state simulation in unit tests
// Better tested through integration/E2E tests
```

## Testing Patterns

### API Client Testing
Use MSW for realistic API mocking:
```typescript
// Success scenarios - test with real MSW handlers
const result = await createLeanCanvas(mockData);
expect(result.success).toBe(true);

// Error scenarios - skip complex MSW error setup
it.skip("should handle API errors", () => {
  // Complex error scenarios better tested at integration level
});
```

### Hook Testing Strategy
Focus on testable aspects, document limitations:
```typescript
// ✅ Test: Hook structure and basic functionality
expect(result.current).toHaveProperty("form");
expect(typeof result.current.actions.save).toBe("function");

// ✅ Test: Individual actions
result.current.actions.saveTemporarily();
expect(storageUtils.saveLeanCanvasTemporarily).toHaveBeenCalled();

// ⚠️ Document: Complex auto-save testing limitations
// Auto-save depends on React Hook Form watch() + useEffect
// Better tested through component/E2E tests
```

### Storage Testing
Use fake timers for consistent behavior:
```typescript
beforeEach(() => {
  vi.useFakeTimers();
  vi.setSystemTime(new Date('2024-01-01T00:00:00Z'));
});

afterEach(() => {
  vi.useRealTimers();
});
```

## Performance Optimization

### 1. Timer Management
- Always use `vi.useFakeTimers()` for tests involving timeouts
- Clean up with `vi.useRealTimers()` in `afterEach`

### 2. Mock Complexity
- Keep mocks simple and focused
- Avoid deep React Hook Form state simulation
- Skip tests that require complex mocking setups

### 3. Test Isolation
- Clear all mocks in `beforeEach`
- Restore all mocks in `afterEach`
- Use `vi.clearAllMocks()` and `vi.restoreAllMocks()`

## Error Handling Testing

### MSW Error Scenarios
```typescript
// Simple approach: Use headers for error injection
const mockHandlers = [
  http.post('/api/v1/lean-canvas', ({ request }) => {
    if (request.headers.get('x-test-error') === 'validation') {
      return HttpResponse.json({ error: 'Validation failed' }, { status: 400 });
    }
    return HttpResponse.json({ success: true });
  }),
];
```

### Skip Complex Error Tests
```typescript
// Skip tests that require complex MSW setup
it.skip("should handle network timeouts", () => {
  // Complex network error simulation
  // Better tested through integration tests
});
```

## Test Documentation

### When to Skip Tests
1. **Complex React Hook Form interactions** - Better tested at component level
2. **Network timeout scenarios** - Require complex MSW setup
3. **Deep form state changes** - Performance impact, integration test territory
4. **Timer-dependent auto-save** - Complex mocking, E2E test candidate

### Test Comments
Always document why tests are skipped:
```typescript
it.skip("should auto-save after form changes", () => {
  // This test requires complex mocking of:
  // 1. React Hook Form's watch() function
  // 2. useEffect dependency changes
  // 3. Timer coordination with form state
  // 
  // Better tested through:
  // - Component integration tests
  // - E2E tests with real user interactions
});
```

## Running Tests

### Commands
- `npm test` - Run all tests
- `npm test -- src/hooks/useLeanCanvas.test.ts` - Run specific test file
- `npm test -- --reporter=verbose` - Detailed output

### Performance Targets
- **Total duration**: < 5 seconds
- **Individual test files**: < 500ms
- **Hook tests**: < 200ms (with proper mocking)

## Best Practices

1. **Test what matters**: Focus on business logic and user-facing functionality
2. **Document limitations**: Be clear about what's not tested and why
3. **Optimize for speed**: Fast tests encourage frequent running
4. **Realistic mocking**: Mock at the right level of abstraction
5. **Clear test names**: Describe what's being tested and expected outcome

## Future Considerations

- **Component Testing**: Use React Testing Library for form interactions
- **E2E Testing**: Playwright for full user workflows
- **Visual Testing**: Consider snapshot testing for UI components
- **Performance Testing**: Monitor test suite execution time

